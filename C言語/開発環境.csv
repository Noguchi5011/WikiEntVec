C言語/開発環境
目次
環境構築
環境構築はプログラミング学習で最大の難関です。 環境構築がうまくいかず、プログラムを書き始める前に諦めてしまうことも少なくありません。
現在はオンライン実行環境 (Playground)が提供されており、環境構築をせずにC言語を試せるようになりました。 これらはインストールが必要なく、OSに関わらず利用できるため、PCはもちろんスマートフォンやタブレットでもC言語を学べます。 本格的なプログラムを書くには機能不足ですが、C言語の文法や意味を学ぶには十分でしょう。
この他、Windows限定ですが、C言語は有名なため、機能不足ですがアプリ形式でインストールせずにクリックするだけで起動できて使用できる簡易コンパイラもいくつか存在しています。ネットワーク環境に不安のある場合などは、こちらを入門に使うと良いでしょう。
この項目では、簡易的なオンライン実行環境や簡易コンパイラのほか、加えて本格的なコンパイラとビルドツールを使った開発手法や統合開発環境についても概説します。
オンライン実行環境
オンライン実行環境はWebブラウザで動作し、プログラムを実行したり、実行結果を確かめたりできます。 数多くのオンライン実行環境がありますが、ここではpaiza.IOとWandboxを紹介します。
ただし、機能制限があり、scanfなど入力に関する一部の機能がpaiza.IOとWandboxの両方とも使えません。
なお、これらのオンライン実行環境を使う際、境界検査インターフェースを使用したプログラムはコンパイル・リンクできないので、標準Cライブラリーの非境界検査インターフェース版の関数に置き換える必要があります[1]。
境界検査インターフェースの関数をMicrosoft Visual C/C++ 特有の関数と理解している人がいますが、たとえば strcpy_s (長さ制限付きで文字列をコーピーする関数)はMSVC/C++特有の関数ではなく、C11で追加された境界検査インターフェース(オプショナル)です。2021年8月現在、glibc が実装していないので paiza.IO と Wandbox では未対応です。このため、標準C言語で同様の機能を持つ関数 strncpy に置き換える必要があります[2]。
paiza.IO
paiza.IOはギノ株式会社が運営するオンライン実行環境で、GUIに日本語を選べるのが特徴です。
Wandbox
Wandboxは日本人有志が運営しているオンライン実行環境で、様々なプログラミング言語と言語処理系を選べるのが特徴です。
開発手順
C言語プログラムの開発は、以下の手順で行われる。
なおC++の場合、ソースファイルの拡張子が「.cc」「 .cpp」「 .cxx」あるいは「 .C」となる。
開発環境を整える
上では昔ながらのエディタとコンパイラを使った開発手順について述べたが、 今はより便利な統合開発環境があり、あえてそれらを使う必要はないだろう。 統合開発環境とはエディタ、コンパイラ、リンカ、デバッガ(※プログラムの不具合いわゆるバグを取り除くためのプログラム)などの機能が、 使いやすく統合された開発環境のことです。 以下では代表的なエディタ、コンパイラ、統合開発環境などを紹介します。 使い方は各公式サイトまたはヘルプを熟読し、習得して欲しい。
なお、C言語の場合でも、C++の開発環境で構わない。
コンパイラ
GNU Compiler Collection
LLVM/Clang
C++ Builder
統合開発環境
Visual Studio Community
インストール時にHDD/SSDの容量が必要になり、最終的に20GBから50GBのHDD/SSDの容量を要求される場合もあります[12]。もし使用しているWindowsで確保しているパーティション容量が20GBよりも小さいなら、あらかじめOSをインストールしなおすなどして。VSをインストールするパーティションを多めに確保しておく必要があります[12]。
Visual Studio では、あらかじめ .NET Framework というアプリケーション開発・実行環境のほぼ最新バージョンが必要ですので、それらもインストールしておく必要があります[13][12]。
さらに、.NET Framework の最新版をインストールするためには、Windows Update によって最新の状態に保つ必要があるので(もし最新の状態に保ってないと、マイクロソフト公式サイトで.NET Framework 最新版だけを単独でダウンロードしてインストーラーを起動しても、インストーラーが途中で中断するなどして、インストールを続行できない場合があります)、
なので、Windows Update によって、ほぼ最新の状態になるまでアップデートしておく必要があります。
このため、Visual Studioをインストールできるようにするための事前の Windowsアップデートに、時間が数日かかる場合もあるので、あらかじめ夜中の睡眠中にアップデートを実行するなどして準備しておこう。
Visual Studioのスタート画面などから、「C++によるデスクトップ環境」や「ユニバーサルWindowsプラットフォーム環境」などの名前の2つのコンポーネントを追加インストールできるので、それぞれ追加インストールしましょう。
C++のコンポーネントの中に、C言語用のコンパイラも含まれています。
Visual StudioでC言語コンパイラを使うためには、インストール時に「C++」や「C#」などの内から「C++」を選びます。
]Visual Stuidoでもソースコードの拡張子を .cpp でなく .c にすればコンパイラは「C言語モード」でコンパイルし、#include <iostream>がソースコードに含まれるとコンパイルエラーとなるし、シンボルに名前修飾は施されません。
以前の編集で、 『C++用でなく「C言語」専用のコンパイラを入手しようにも、マイクロソフト社は、C++コンパイル機能の無い「C言語」専用のコンパイラは、提供していない。』 とありましたが担当編集者の誤解で、Visual C++ にはC言語モードがあります。
Visual Studio で、デバッグ セッションの終了時にコンソールが閉じてしまう場合は、
を無効にします。
その他、注意事項
コンパイラごとの個性
コンパイラごとに、文法が少し違っている場合もある。
そのため、初心者は、いくつかの無料コンパイラを併用するのが良いだろう。
自作したプログラムのライセンスについて
コンパイラには、そのコンパイラのソースコードが公開されているもの(GNU のコンパイラ)と、非公開のもの(例えばVisual Studio など)があります。
ソース非公開のコンパイラで開発したプログラムでも、自分の自作したプログラムのソースを公開するのは、一般的に自由です。
GNUの場合、GNU標準のライセンスが「GPL」といって、やや特殊なので、よく分からなければ、他のVisual Studio などGCC以外のコンパイラで制作するのが安全だろう。
PowerShellを使う場合
実はWindows7のSP1以降のWindowsには、コマンドプロンプトとは別に、最新型のPowerShellというコマンドインタープリターが入っています。
PowerShellを使う場合、コマンドプロンプトとの仕様の違いがある(IEEE 1003.2 POSIX Shell Standard に影響を受けている)。
カレントフォルダーにあるファイルを実行したい場合、
で実行します。 これは主にセキュリティが理由で、環境変数 PATH に . が含まれていないからです(コマンドプロンプトでは PATH に . が含まれるので、冒頭の「.\」が不要です)。
たとえば「a.exe」というファイル名があるなら、
が実行コマンドになります。
Windowsでオープンソース製コンパイラのGCCを使う場合、コマンドはPowerShellでもコマンドプロンプトでも同じです。 つまり、たとえば「test1.c」ファイルをgccコンパイルしたいなら、PowerShellでも
です。
脚註
参考文献
案内メニュー
個人用ツール
名前空間
変種 拡張 折り畳む
表示
その他 拡張 折り畳む
検索
ナビゲーション
ヘルプ
ツールボックス
印刷/書き出し
他言語版